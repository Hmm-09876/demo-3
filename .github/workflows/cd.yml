name: CD - Build & Deploy to K8s

on:
    push:
    workflow_dispatch:

permissions:
    contents: read
    packages: write

env:
    APP_DIR: ./src/demo_app
    DOCKERFILE: ./src/demo_app/Dockerfile
    IMAGE_TAG: ci
    DEPLOYMENT_NAME: demo-app
    CONTAINER_NAME: demo-app
    K8S_MANIFEST: ./k8s
    K8S_NAMESPACE: ci-deploy

jobs:
    build-and-push:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        env:
            GHCR_TOKEN_ENV: ${{ secrets.GHCR_TOKEN }}
        outputs:
            image: ${{ steps.set-image.outputs.image }} 
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            
            - name: Login to Docker Registry
              if: ${{ env.GHCR_TOKEN_ENV != '' }}
              uses: docker/login-action@v2
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ env.GHCR_TOKEN_ENV }}

            - name: Determine image name & tag
              id: set-image
              run: |
                IMAGE=$(echo "ghcr.io/${{ github.repository }}/demo-app:${{ env.IMAGE_TAG }}-${{ github.sha }}" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
                echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v4
              with:
                context: ${{ env.APP_DIR }}
                file: ${{ env.DOCKERFILE }}
                push: ${{ env.GHCR_TOKEN_ENV != '' }}
                tags: ${{ steps.set-image.outputs.image }}
                cache-from: type=registry,ref=${{ steps.set-image.outputs.image }} 
                cache-to: type=inline

    deploy:
        name: Deploy to K8s
        runs-on: self-hosted
        needs: build-and-push
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Kubectl
              uses: azure/setup-kubectl@v4
              with:
                version: 'latest'

            - name: Restore Kubeconfig from Secret
              env:
                KUBECONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
              run: |
                echo "$KUBECONFIG_DATA" | base64 --decode > kubeconfig
                export KUBECONFIG=$PWD/kubeconfig
                kubectl version
                kubectl config current-context || true

            - name: Apply K8s manifests
              env: 
                IMAGE: ${{ needs.build-and-push.outputs.image }}
                NAMESPACE: ${{ secrets.K8S_NAMESPACE || env.K8S_NAMESPACE }}
              run: |
                echo "IMAGE=${{ needs.build-and-push.outputs.image }}"
                if kubectl -n "$NAMESPACE" get deployment "${{ env.DEPLOYMENT_NAME }}" >/dev/null 2>&1; then
                    kubectl -n "$NAMESPACE" set image deployment/${{ env.DEPLOYMENT_NAME}} ${{ env.CONTAINER_NAME}}=${IMAGE} --record
                else
                    mkdir -p tmp_k8s
                    cp -r ${{ env.K8S_MANIFEST }}/* tmp_k8s/ || true
                    if grep -R "IMAGE_PLACEHOLDER" tmp_k8s >/dev/null 2>&1; then 
                        find tmp_k8s -type f -name "*.yml" | xargs sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g"
                    fi
                    kubectl -n "$NAMESPACE" apply -f tmp_k8s/
                fi

            - name: Wait for deployment rollout
              env:
                NAMESPACE: ${{ secrets.K8S_NAMESPACE || env.K8S_NAMESPACE }}
              run: |
                kubectl -n "$NAMESPACE" rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=120s || (
                    echo "Rollout status check failed. Fetching pod details..."
                    kubectl -n "$NAMESPACE" get pods -o wide
                    kubectl -n "$NAMESPACE" describe deployment/${{ env.DEPLOYMENT_NAME }}
                    kubectl -n $NAMESPACE logs -l app=${{ env.DEPLOYMENT_NAME}} --tail=200 || true
                    exit 1
                )